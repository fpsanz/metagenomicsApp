runApp('updateDBapp.R')
usuario
fichero
mail
dbSendQuery(conn, "insert into usuarios (usuario, mail, fichero) values (?, ?, ?) ", list(usuario,mail,fichero) )
res <- dbSendQuery(conn, "insert into usuarios (usuario, mail, fichero) values (?, ?, ?) ", list(usuario,mail,fichero) )
dbExecute(conn, "insert into usuarios (usuario, mail, fichero) values (?, ?, ?) ", list(usuario,mail,fichero) )
runApp('updateDBapp.R')
runApp('updateDBapp.R')
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
identif = usuario
dbDisconnect(conn)
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
usuario = usuario
fichero = fichero
mail = mail
usuario
fichero
mail
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
dbGetQuery(conn, "Select * from usuarios where usuario=?, mail=?, fichero=?", params=list(usuario,mail,fichero) )
dbGetQuery(conn, "Select * from usuarios where usuario=? & mail=? & fichero=?", params=list(usuario,mail,fichero) )
dbGetQuery(conn, "Select * from usuarios where usuario=? , params=list(usuario,mail,fichero) )
)
dbGetQuery(conn, "Select * from usuarios where usuario=?" , params=list(usuario,mail,fichero) )
dbGetQuery(conn, "Select * from usuarios where usuario=?" , params=list(usuario) )
dbGetQuery(conn, "Select * from usuarios where usuario=? & mail=?" , params=list(usuario,mail) )
dbGetQuery(conn, "Select * from usuarios where usuario=? && mail=?" , params=list(usuario,mail) )
dbGetQuery(conn, "Select * from usuarios where usuario=? and mail=?" , params=list(usuario,mail) )
dbGetQuery(conn, "Select * from usuarios where usuario=? and mail=? and fichero=?" , params=list(usuario,mail,fichero) )
res <- dbGetQuery(conn, "Select * from usuarios where usuario=? and mail=? and fichero=?" , params=list(usuario,mail,fichero) )
res
anti_join(res, data.frame(usuario,mail,fichero))
anti_join(res, data.frame(usuario=usuario,mail=mail,fichero=fichero))
anti_join(res, data.frame(usuario=usuario,mail=mail,fichero=fichero) )
data.frame(usuario=usuario,mail=mail,fichero=fichero)
res
semi_join(res, data.frame(usuario=usuario,mail=mail,fichero=fichero) )
compare(res, data.frame(usuario=usuario,mail=mail,fichero=fichero) )
compare::compare(res, data.frame(usuario=usuario,mail=mail,fichero=fichero) )
install.packages("compare")
compare::compare(res, data.frame(usuario=usuario,mail=mail,fichero=fichero) )
compare::compare(res, data.frame(usuario=usuario,mail=mail,fichero=fichero), allowAll = TRUE )
r <- compare::compare(res, data.frame(usuario=usuario,mail=mail,fichero=fichero), allowAll = TRUE )
r
r <- compare::compare( data.frame(usuario=usuario,mail=mail,fichero=fichero), res, allowAll = TRUE )
r
r <- compare::compare( data.frame(usuario=usuario,mail=mail,fichero="paco"), res, allowAll = TRUE )
r
r <- compare::compare( data.frame(usuario=usuario,mail=mail,fichero="kk.Rds"), res, allowAll = TRUE )
r
isTRUE(r)
str(r)
r$result
r <- compare::compare( data.frame(usuario=usuario,mail=mail,fichero="paco"), res, allowAll = TRUE )
r$result
# crear base de datos
usuarios <- data.frame(usuario=c("fpsanz","fpsanz","fernando","fernando"),
mail=c("fepesanz8@gmail.com","fepesanz8@gmail.com",
"fernando.perez8@um.es","fernando.perez8@um.es"),
fichero = c("setosa.Rds","virginica.Rds","cars.Rds","iris.Rds") )
#conectar a la base de datos
conn <- dbConnect(RSQLite::SQLite(), "usuarios.db")
library("RSQLite")
library(RMySQL)
library("tidyverse")
# crear base de datos
usuarios <- data.frame(usuario=c("fpsanz","fpsanz","fernando","fernando"),
mail=c("fepesanz8@gmail.com","fepesanz8@gmail.com",
"fernando.perez8@um.es","fernando.perez8@um.es"),
fichero = c("setosa.Rds","virginica.Rds","cars.Rds","iris.Rds") )
#conectar a la base de datos
conn <- dbConnect(RSQLite::SQLite(), "usuarios.db")
usuarios %>% unite(col= "id", usuario,mail,fichero, sep = "")
usuarios
usuarios %>% unite(col= "id", usuario,mail,fichero, sep = "")
usuarios %>% unite(col= "id", usuario,mail,fichero, sep = "", remove = FALSE)
usuarios <- usuarios %>% unite(col= "id", usuario,mail,fichero, sep = "", remove = FALSE)
usuarios
#conectar a la base de datos
conn <- dbConnect(RSQLite::SQLite(), "usuarios.db")
#volcar a la base de datos
dbWriteTable(conn, "usuarios", usuarios)
#volcar a la base de datos
dbWriteTable(conn, "usuarios", usuarios, overwrite=TRUE)
#Hacer consultas a la base de datos:
# mÃ©todo 1
dbGetQuery(conn, "Select * from usuarios where usuario = 'fpsanz'")
usuarios
usuarios
# modificar tabla para que id sea PK
dbSendQuery(conn, "alter table usuarios add primary key(id)")
library(shiny); runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
dbDisconnect(conn)
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
usuario="fpsanz"
mail="fepesanz8@gmail.com"
fichero="setosa.Rds"
id = paste0(usuario,mail,fichero)
id
dbExecute(conn, "insert into usuarios (id, usuario, mail, fichero) values (?, ?, ?, ?) ", list(id, usuario,mail,fichero) )
dbGetQuery(conn, "select id from usuarios where id = ?", list(id))
dbGetQuery(conn, "select id from usuarios where id = ?", list("kk"))
kk <- dbGetQuery(conn, "select id from usuarios where id = ?", list("kk"))
dim(kk)
kk = dbGetQuery(conn, "select id from usuarios where id = ?", list(id))
dim(kk)
kk$id
kk <- dbGetQuery(conn, "select id from usuarios where id = ?", list("kk"))
kk$id
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
library(DT)
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
values$val
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
dfUsuario()
dfUsuario
dfUsuario()
dfUsuario() <- "kk"
kk <- reactiveValues(kk=NULL)
kk$kk <- recuperarDatosUsuario(input$usuarios)
kk$kk
dfUsuario <- reactive({kk$kk})
dfUsuario()
kk$kk <- "kk"
dfUsuario()
runApp('updateDBapp.R')
kk$kk
dfUsuario()
dfUsuario() <- kk$kk
dfUsuario <- reactive({kk$kk})
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
input$tablaUsuario_rows_selected
input$tablaUsuario_rows_selected
input$tablaUsuario_rows_selected
runApp('updateDBapp.R')
runApp('updateDBapp.R')
kk <- dfUsuario()[selectedRows,1]
kk
kk[1]
id="fpsanzfepesanz8@gmail.comww"
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
dbExecute(conn, "DELETE FROM usuarios WHERE id IN (?);", list(id))
dbDisconnect(conn)
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
dbExecute(conn, "DELETE FROM usuarios WHERE id IN (?);", list(id))
dbExecute(conn, "DELETE FROM usuarios WHERE id IN (?);", list(id))
id = c("fpsanzfepesanz8@gmail.comss", "fpsanzfepesanz8@gmail.comrr")
if
id
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
dbExecute(conn, "DELETE FROM usuarios WHERE id IN (?);", list(id))
dbDisconnect(conn)
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
ids
id
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
recuperarDatosUsuario(input$usuarios)
recuperarDatosUsuario(input$usuarios)
dfUsuario$val
dfUsuario$val <- recuperarDatosUsuario(input$usuarios)
dfUsuario$val
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
recuperarDatosUsuario(input$usuarios)
kk = recuperarDatosUsuario(input$usuarios)
kk$mail
runApp('updateDBapp.R')
dfUsuario$val$mail
runApp('updateDBapp.R')
input$inputMail
length(input$inputMail)
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
input$inputMail == ""
input$inputMail
runApp('updateDBapp.R')
runApp('updateDBapp.R')
!is.null(input$inputMail) & input$inputMail == ""
!is.null(input$inputMail)
!is.null(input$inputMail) | input$inputMail ==""
input$inputMail
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
input$inputMail
runApp('updateDBapp.R')
runApp('updateDBapp.R')
is.null(input$inputMail)
!is.null(input$inputMail)
input$inputMail
input$inputMail
runApp('updateDBapp.R')
updateTextInput(session, "inputMail", value = NULL)
input$inputMail
input$inputMail <- NULL
runApp('updateDBapp.R')
runApp('updateDBapp.R')
input$inputMail
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp()
runApp('updateDBapp.R')
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
usuario="fpsanz"
resdf <- dbGetQuery(con, paste0("Select * from usuarios where usuario ='",usuario,"';") )
con <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
resdf <- dbGetQuery(con, paste0("Select * from usuarios where usuario ='",usuario,"';") )
dbDisconnect(con)
dbDisconnect(conn)
resdf
runApp()
a = 1
b = 2
runApp()
runApp('updateDBapp.R')
a = 1
b = 2
save("kk.Rdata", list(a,b))
save(file="kk.Rdata", list(a,b) )
save(file="kk.Rdata", list = c("a","b") )
rm(a)
rm(b)
load("kk.Rdata")
rm(a)
rm(b)
load("kk.Rdata")
save(file="kk.Rdata", list = c(a,b) )
runApp()
library(shiny); runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp()
library(shinythemes)
runApp()
runApp()
runApp()
runApp()
runApp()
#cargar tabla de muestras y experimentos
exper <- read.delim("metadata.tsv", sep = "\t", header = T)
exper <- read.delim("/datos/analisisInvestigadores/20210625_mulero_metagenomica/metadata.tsv", sep = "\t", header = T)
exper
# cargar fichero de abundancias
otu <- as.matrix(read.delim("datos/analisisInvestigadores/20210625_mulero_metagenomica/controles/OTU_genus.txt", row.names=1))
attr(otu, "dimnames")[[2]] <- gsub("^S[0-9].{2}_",
"",
attr(otu, "dimnames")[[2]] ) %>%
gsub("_v1|_v2", "" , .)
# cargar fichero de abundancias
otu <- as.matrix(read.delim("datos/analisisInvestigadores/20210625_mulero_metagenomica/controles/OTU_genus.txt", row.names=1))
# cargar fichero de abundancias
otu <- as.matrix(read.delim("/datos/analisisInvestigadores/20210625_mulero_metagenomica/controles/OTU_family.txt", row.names=1))
attr(otu, "dimnames")[[2]] <- gsub("^S[0-9].{2}_",
"",
attr(otu, "dimnames")[[2]] ) %>%
gsub("_v1|_v2", "" , .)
otu
save("data/muleroControlesFamily.Rdata", list(exper,otu))
save("data/muleroControlesFamily.Rdata", list("exper","otu"))
save("data/muleroControlesFamily.Rdata", list = c("exper","otu") )
save("./data/muleroControlesFamily.Rdata", list = c("exper","otu") )
save("muleroControlesFamily.Rdata", list = c("exper","otu") )
save("muleroControlesFamily.RData", list = c("exper","otu") )
save(file="muleroControlesFamily.RData", list = c("exper","otu") )
save(file="data/muleroControlesFamily.RData", list = c("exper","otu") )
runApp()
runApp()
env <- reactiveFileReader(1000, session, "data/muleroControlesFamily.RData", LoadToEnvironment)
env
env()[[names(env())[1]]]
env <- reactiveFileReader(1000, session, "data/muleroControlesFamily.RData", LoadToEnvironment )
vars <- load(file = "data/muleroControlesFamily.RData", envir = .GlobalEnv)
vars
get[[vars[1]]]
get(vars[1], .GlobalEnv)
get(vars[2], .GlobalEnv)
runApp('updateDBapp.R')
runApp()
runApp()
objetos
runApp()
datos$exper
datos$ot
datos$otu
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
selectInput("selectvariable", )
runApp()
runApp()
runApp()
colnames(datos$exper)
runApp()
library(shiny); runApp('updateDBapp.R')
readRDS("./ddbb/dbpass.Rds")
runApp()
load("./data/muleroControlesFamily.RData")
names(exper)
kk <- names(exper)
kk[2:3]
exper[,kk[2:3]]
exper %>% unite( age,gender)
exper %>% unite( age,gender, remove = F)
exper %>% unite( age,gender, sep = "_", remove = F)
exper %>% unite( paste0(quote(age),quote(gender)) age,gender, sep = "_", remove = F)
age
exper %>% unite( paste0(quote(age),quote(gender)), age,gender, sep = "_", remove = F)
quote(exper$age)
exper %>% unite( as.character(quote(age)), age,gender, sep = "_", remove = F)
exper %>% unite( "kk", age,gender, sep = "_", remove = F)
exper %>% unite( as.character(quote(1)), age,gender, sep = "_", remove = F)
exper %>% unite( as.character(quote("1")), age,gender, sep = "_", remove = F)
exper %>% unite( col=as.character(quote("1")), age,gender, sep = "_", remove = F)
exper %>% unite( "kk", age,gender, sep = "_", remove = F)
exper %>% unite(kk, age,gender, sep = "_", remove = F)
exper %>% unite(age, age,gender, sep = "_", remove = F)
exper %>% unite(age_gender, age,gender, sep = "_", remove = F)
exper %>% unite(paste0(age,gender), age,gender, sep = "_", remove = F)
exper %>% unite( col=as.character(quote("1")), age,gender, sep = "_", remove = F)
columnas <- c("age","gender")
exper %>% unite("kk", columnas, sep="_", remove=F)
exper %>% unite(kk, columnas, sep="_", remove=F)
contrast<- paste0(columnas, collapse = "_")
contrast
exper %>% unite(contrast, columnas, sep="_", remove=F)
contrast
rlang(contrast)
rlang::ensym(contrast)
exper %>% unite(rlang::ensym(contrast), columnas, sep="_", remove=F)
exper %>% unite(rlang::syms(rlang::ensym(contrast)), columnas, sep="_", remove=F)
exper %>% unite(rlang::syms(rlang::ensym(contrast)), columnas, sep="_", remove=F)
rlang::syms(rlang::ensym(contrast))
exper %>% unite(rlang::syms(rlang::ensym(contrast))[[1]], columnas, sep="_", remove=F)
exper %>% unite(rlang::sym(rlang::ensym(contrast)), columnas, sep="_", remove=F)
exper %>% unite(rlang::sym(eval(contrast), columnas, sep="_", remove=F)
exper %>% unite((eval(contrast), columnas, sep="_", remove=F)
exper %>% unite(eval(contrast), columnas, sep="_", remove=F)
exper %>% unite(eval(contrast), columnas, sep="_", remove=F)
eval(contrast)
rlang::sym(eval(contrast))
eval(contrast)
exper %>% unite(rlang::sym(eval(contrast)), columnas, sep="_", remove=F)
rlang::sym(eval(contrast)) %>% str
exper %>% tidyr::unite(rlang::sym(eval(contrast)), columnas, sep="_", remove=F)
exper %>% tidyr::unite(col = rlang::sym(eval(contrast)), columnas, sep="_", remove=F)
exper %>% tidyr::unite(col = rlang::ensym(eval(contrast)), columnas, sep="_", remove=F)
exper %>% tidyr::unite(col = !!(eval(contrast)), columnas, sep="_", remove=F)
exper %>% tidyr::unite(col = !!contrast, columnas, sep="_", remove=F)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
View(otu)
View(otu)
####
# cargar fichero de abundancias
otu <- as.matrix(read.delim("../analisisInvestigadores/20210625_mulero_metagenomica/controles/OTU_family.txt", row.names=1))
####
# cargar fichero de abundancias
otu <- as.matrix(read.delim("../../analisisInvestigadores/20210625_mulero_metagenomica/controles/OTU_family.txt", row.names=1))
attr(otu, "dimnames")[[2]] <- gsub("^S[0-9].{2}_",
"",
attr(otu, "dimnames")[[2]] ) %>%
gsub("_v1|_v2", "" , .)
#eliminar 2 muestras
otu <- as.data.frame(otu)
otuF <- otu %>% select(-c("129","146"))
otu <- otuF
class(otu)
save("./data/muleroControlesFamily.RData", list = c(exper,otu))
save(file="./data/muleroControlesFamily.RData", list = c(exper,otu))
save(file="muleroControlesFamily.RData", list = c(exper,otu))
save(file="muleroControlesFamily.RData", list = c("exper","otu"))
source("utils.R")
runApp()
runApp()
View(contrasts)
contrasts$res
names(contrast$res)
names(contrasts$res)
dim(contrasts$res)
length(contrasts$res)
runApp()
runApp()
listcontr
group
runApp()
runApp()
install.packages("waiter")
library(waiter)
runApp()
ui <- fluidPage(
autoWaiter(),
fluidRow(class= "headerLogo",
column(width = 3,
HTML('<a href="http://www.imib.es/web/personal.jsf?id=7961" target="_blank"><img src="imibNombre.png" alt="imib", style="height:40px; padding-top:3px;"></a>')
)),
navbarPage(id ="navpanel",
title ="Metagenomics viewer",
theme = shinytheme("superhero"),
collapsible = TRUE,
fluid = TRUE,
source(file = "ui-home.R", local = TRUE, encoding = "UTF-8")$value,
source(file = "ui-selectContrast.R", local = TRUE, encoding = "UTF-8")$value,
#source(file = "ui-corrplot.R", local = TRUE, encoding = "UTF-8")$value,
#source(file = "ui-contributions.R", local = TRUE, encoding = "UTF-8")$value,
#source(file = "ui-hierarplot.R", local = TRUE, encoding = "UTF-8")$value,
#source(file = "ui-hcpc.R", local = TRUE, encoding = "UTF-8")$value,
#source(file = "ui-help.R", local = TRUE, encoding = "UTF-8")$value,
includeCSS("./www/mystyle.css"),
setShadow(class = "box"),
useShinyalert()
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
input$contraste
input$contraste
input$contraste
contrasts$res
contrasts$res[[1]]
contrasts$res[['A1.A2']]
contrasts$res[[input$contraste]]
DT::datatable(contrasts$res[[input$contraste]])
contrasts$names
input$contraste
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
DT::datatable(iris)
DT::datatable(iris)
runApp()
DT::datatable(contrasts$res[[input$contraste]]) %>%
DT::formatSignif(digits = 3)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
exper$sampleId %in% input$selectcriteria
input$selectcriteria
runApp()
samplesRemove
datos$exper
samplesRemove
datos$exper %>% filter(sampleId != samplesRemove)
datos$exper %>% filter(sampleId != samplesRemove)
samplesRemove
datos$exper %>% filter(sampleId != "C_A4_M8")
datos$exper %>% filter(!(sampleId %in% samplesRemove))
datos$exper <- datos$exper %>% filter(!(sampleId %in% samplesRemove))
datos$exper
datos$otu <- datos$otu %>% select(!samplesRemove)
datos$otu <- datos$otu %>% select(!all_of(samplesRemove))
runApp()
