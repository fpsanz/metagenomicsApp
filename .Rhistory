con = dbConnect(MySQL(), user = "root",
password = "fps379725",
dbname = "usuarios",
host = "localhost")
dbGetQuery(con, paste0("Select * from ficheros, usuarios where ficheros.idusuario = usuarios.id and usuarios.usuario ='",usuario,"';") )
}
paste0("Select * from ficheros, usuarios where ficheros.idusuario = usuarios.id and usuarios.usuario =",usuario,";")
conectarBBDD("fpsanz")
conectarBBDD <- function(usuario){
con = dbConnect(MySQL(), user = "root",
password = "fps379725",
dbname = "usuarios",
host = "localhost")
resdf <- dbGetQuery(con, paste0("Select * from ficheros, usuarios where ficheros.idusuario = usuarios.id and usuarios.usuario ='",usuario,"';") )
return(resdf)
}
conectarBBDD("fpsanz")
conectarBBDD("fpsan")
kk <- conectarBBDD("fpsan")
kk$usuario
kk$usuario %>% dim
kk$usuario %>% length()
respuesta <- conectarBBDD(usuario)
respuesta$fichero
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dbDisconnect(con)
dbDisconnect(con)
runApp()
runApp()
runApp()
library(shinyjs)
runApp()
runApp()
readRDS("dbpass.Rds")
runApp()
#conectar a la base de datos
conn <- dbConnect(RSQLite::SQLite(), "credenciales.sqlite")
#comprobar conexion
dbListTables(con)
#comprobar conexion
dbListTables(conn)
dbListTables(conn)
dbGetQuery(conn, "select * from credentials")
dbGetQuery(conn, "select * from logs")
dbGetQuery(conn, "select * from pwd_mngt")
conn <- DBI::dbConnect(SQLite(), dbname = "credenciales.sqlite")
read_db_decrypt(conn, name="credentials", passphrase = "fps379725")
write_db_decrypt(conn = conn, value = data.frame(user="fps",password="4321"), name="credentials", passphrase = "fps379725")
write_db_encrypt(conn = conn, value = data.frame(user="fps",password="4321"), name="credentials", passphrase = "fps379725")
read_db_decrypt(conn, name="credentials", passphrase = "fps379725")
write_db_encrypt(conn = conn, value = data.frame(user="fps",password="4321"), name="credentials", passphrase = "fps379725", append=TRUE)
# library(keyring)
# key_set_with_value("R-fpsanz-key", "obiwankenobi", "1235")
# para crear la base de datos de usuarios
create_db(
credentials_data = credentials,
sqlite_path = "credenciales.sqlite",
passphrase = dbpass
)
read_db_decrypt(conn, name="credentials", passphrase = "fps379725")
#conectar a la base de datos
conn <- dbConnect(RSQLite::SQLite(), "usuarios.db")
# crear base de datos
usuarios <- data.frame(usuario=c("fpsanz","fpsanz","fernando","fernando"),
mail=c("fepesanz8@gmail.com","fepesanz8@gmail.com",
"fernando.perez8@um.es","fernando.perez8@um.es"),
fichero = c("setosa.Rds","virginica.Rds","cars.Rds","iris.Rds") )
usuarios
#volcar a la base de datos
dbWriteTable(conn, "usuarios", usuarios)
#Hacer consultas a la base de datos:
# método 1
dbGetQuery(conn, "Select * from usuarios where usuario = 'fpsanz'")
# método 2 con parámetros en la query
identif = "fpsanz"
dbGetQuery(conn, "Select * from ficheros, usuarios where ficheros.id = usuarios.id and usuarios.id=?",
params=identif)
dbGetQuery(conn, "Select * from usuarios where usuario=?",
params=identif)
library(shiny)
library(RSQLite)
library(tidyverse)
library(shinydashboard)
runApp('updateUserDB')
runApp('updateUserDB')
runApp('updateDBapp.R')
library("RSQLite")
library(RMySQL)
dbDisconnect(conn)
dbDisconnect(con)
conn <- DBI::dbConnect(SQLite(), dbname = "credenciales.sqlite")
read_db_decrypt(conn, name = credentials)
read_db_decrypt(conn, name = "credentials")
read_db_decrypt(conn, name = "credentials", passphrase = "fps379725")
dbGetQuery(conn, "select from credentials where user = 'fpsanz' ")
dbGetQuery(conn, "select * from credentials where user = 'fpsanz' ")
df <- read_db_decrypt(conn, name = credentials)
df <- read_db_decrypt(conn, name = credentials)
conn <- DBI::dbConnect(SQLite(), dbname = "credenciales.sqlite")
df <- read_db_decrypt(conn, name = credentials, passphrase = "fps379725")
dbDisconnect(conn)
conn <- DBI::dbConnect(SQLite(), dbname = "credenciales.sqlite")
df <- read_db_decrypt(conn, name = "credentials", passphrase = "fps379725")
dbDisconnect(conn)
df$user
usuariosCredenciales <- usuariosCredenciales()
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
usuariosCredenciales
usuario
usuario
dfUsuario
runApp('updateDBapp.R')
runApp('updateDBapp.R')
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
resdf <- dbGetQuery(con, paste0("Select * from ficheros, usuarios where ficheros.idusuario = usuarios.id and usuarios.usuario ='",usuario,"';") )
dbDisconnect(con)
dbDisconnect(conn)
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
resdf <- dbGetQuery(con, paste0("Select * from ficheros, usuarios where ficheros.idusuario = usuarios.id and usuarios.usuario ='",usuario,"';") )
dbDisconnect(conn)
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
identif = usuario
resdf <- dbGetQuery(conn, "Select * from usuarios where usuario=?", params=identif )
dbDisconnect(conn)
resdf
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
usuario=fpsanz
usuario="fpsanz"
fichero="kk.Rds"
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
usuario
identif = usuario
resdf <- dbGetQuery(conn, "Select * from usuarios where usuario=?", params=identif )
resdf
dbDisconnect(conn)
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
mail
mail = "fepesanz8@gmail.com"
fichero
dbSendQuery(conn, "insert into usuarios (usuario, mail, fichero) values (?, ?, ?) ", list(usuario,mail,fichero) )
#dbSendQuery(conn, "Select * from usuarios where usuario=?", params=usuario )
dbDisconnect(conn)
#dbSendQuery(conn, "Select * from usuarios where usuario=?", params=usuario )
dbDisconnect(conn)
conn <- DBI::dbConnect(SQLite(), dbname = "credenciales.sqlite")
df <- read_db_decrypt(conn, name = "credentials", passphrase = "fps379725")
dbDisconnect(conn)
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
identif = usuario
resdf <- dbGetQuery(conn, "Select * from usuarios where usuario=?", params=identif )
resdf
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
usuario
fichero
mail
dbSendQuery(conn, "insert into usuarios (usuario, mail, fichero) values (?, ?, ?) ", list(usuario,mail,fichero) )
res <- dbSendQuery(conn, "insert into usuarios (usuario, mail, fichero) values (?, ?, ?) ", list(usuario,mail,fichero) )
dbExecute(conn, "insert into usuarios (usuario, mail, fichero) values (?, ?, ?) ", list(usuario,mail,fichero) )
runApp('updateDBapp.R')
runApp('updateDBapp.R')
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
identif = usuario
dbDisconnect(conn)
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
usuario = usuario
fichero = fichero
mail = mail
usuario
fichero
mail
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
dbGetQuery(conn, "Select * from usuarios where usuario=?, mail=?, fichero=?", params=list(usuario,mail,fichero) )
dbGetQuery(conn, "Select * from usuarios where usuario=? & mail=? & fichero=?", params=list(usuario,mail,fichero) )
dbGetQuery(conn, "Select * from usuarios where usuario=? , params=list(usuario,mail,fichero) )
)
dbGetQuery(conn, "Select * from usuarios where usuario=?" , params=list(usuario,mail,fichero) )
dbGetQuery(conn, "Select * from usuarios where usuario=?" , params=list(usuario) )
dbGetQuery(conn, "Select * from usuarios where usuario=? & mail=?" , params=list(usuario,mail) )
dbGetQuery(conn, "Select * from usuarios where usuario=? && mail=?" , params=list(usuario,mail) )
dbGetQuery(conn, "Select * from usuarios where usuario=? and mail=?" , params=list(usuario,mail) )
dbGetQuery(conn, "Select * from usuarios where usuario=? and mail=? and fichero=?" , params=list(usuario,mail,fichero) )
res <- dbGetQuery(conn, "Select * from usuarios where usuario=? and mail=? and fichero=?" , params=list(usuario,mail,fichero) )
res
anti_join(res, data.frame(usuario,mail,fichero))
anti_join(res, data.frame(usuario=usuario,mail=mail,fichero=fichero))
anti_join(res, data.frame(usuario=usuario,mail=mail,fichero=fichero) )
data.frame(usuario=usuario,mail=mail,fichero=fichero)
res
semi_join(res, data.frame(usuario=usuario,mail=mail,fichero=fichero) )
compare(res, data.frame(usuario=usuario,mail=mail,fichero=fichero) )
compare::compare(res, data.frame(usuario=usuario,mail=mail,fichero=fichero) )
install.packages("compare")
compare::compare(res, data.frame(usuario=usuario,mail=mail,fichero=fichero) )
compare::compare(res, data.frame(usuario=usuario,mail=mail,fichero=fichero), allowAll = TRUE )
r <- compare::compare(res, data.frame(usuario=usuario,mail=mail,fichero=fichero), allowAll = TRUE )
r
r <- compare::compare( data.frame(usuario=usuario,mail=mail,fichero=fichero), res, allowAll = TRUE )
r
r <- compare::compare( data.frame(usuario=usuario,mail=mail,fichero="paco"), res, allowAll = TRUE )
r
r <- compare::compare( data.frame(usuario=usuario,mail=mail,fichero="kk.Rds"), res, allowAll = TRUE )
r
isTRUE(r)
str(r)
r$result
r <- compare::compare( data.frame(usuario=usuario,mail=mail,fichero="paco"), res, allowAll = TRUE )
r$result
# crear base de datos
usuarios <- data.frame(usuario=c("fpsanz","fpsanz","fernando","fernando"),
mail=c("fepesanz8@gmail.com","fepesanz8@gmail.com",
"fernando.perez8@um.es","fernando.perez8@um.es"),
fichero = c("setosa.Rds","virginica.Rds","cars.Rds","iris.Rds") )
#conectar a la base de datos
conn <- dbConnect(RSQLite::SQLite(), "usuarios.db")
library("RSQLite")
library(RMySQL)
library("tidyverse")
# crear base de datos
usuarios <- data.frame(usuario=c("fpsanz","fpsanz","fernando","fernando"),
mail=c("fepesanz8@gmail.com","fepesanz8@gmail.com",
"fernando.perez8@um.es","fernando.perez8@um.es"),
fichero = c("setosa.Rds","virginica.Rds","cars.Rds","iris.Rds") )
#conectar a la base de datos
conn <- dbConnect(RSQLite::SQLite(), "usuarios.db")
usuarios %>% unite(col= "id", usuario,mail,fichero, sep = "")
usuarios
usuarios %>% unite(col= "id", usuario,mail,fichero, sep = "")
usuarios %>% unite(col= "id", usuario,mail,fichero, sep = "", remove = FALSE)
usuarios <- usuarios %>% unite(col= "id", usuario,mail,fichero, sep = "", remove = FALSE)
usuarios
#conectar a la base de datos
conn <- dbConnect(RSQLite::SQLite(), "usuarios.db")
#volcar a la base de datos
dbWriteTable(conn, "usuarios", usuarios)
#volcar a la base de datos
dbWriteTable(conn, "usuarios", usuarios, overwrite=TRUE)
#Hacer consultas a la base de datos:
# método 1
dbGetQuery(conn, "Select * from usuarios where usuario = 'fpsanz'")
usuarios
usuarios
# modificar tabla para que id sea PK
dbSendQuery(conn, "alter table usuarios add primary key(id)")
library(shiny); runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
dbDisconnect(conn)
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
usuario="fpsanz"
mail="fepesanz8@gmail.com"
fichero="setosa.Rds"
id = paste0(usuario,mail,fichero)
id
dbExecute(conn, "insert into usuarios (id, usuario, mail, fichero) values (?, ?, ?, ?) ", list(id, usuario,mail,fichero) )
dbGetQuery(conn, "select id from usuarios where id = ?", list(id))
dbGetQuery(conn, "select id from usuarios where id = ?", list("kk"))
kk <- dbGetQuery(conn, "select id from usuarios where id = ?", list("kk"))
dim(kk)
kk = dbGetQuery(conn, "select id from usuarios where id = ?", list(id))
dim(kk)
kk$id
kk <- dbGetQuery(conn, "select id from usuarios where id = ?", list("kk"))
kk$id
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
library(DT)
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
values$val
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
dfUsuario()
dfUsuario
dfUsuario()
dfUsuario() <- "kk"
kk <- reactiveValues(kk=NULL)
kk$kk <- recuperarDatosUsuario(input$usuarios)
kk$kk
dfUsuario <- reactive({kk$kk})
dfUsuario()
kk$kk <- "kk"
dfUsuario()
runApp('updateDBapp.R')
kk$kk
dfUsuario()
dfUsuario() <- kk$kk
dfUsuario <- reactive({kk$kk})
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
input$tablaUsuario_rows_selected
input$tablaUsuario_rows_selected
input$tablaUsuario_rows_selected
runApp('updateDBapp.R')
runApp('updateDBapp.R')
kk <- dfUsuario()[selectedRows,1]
kk
kk[1]
id="fpsanzfepesanz8@gmail.comww"
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
dbExecute(conn, "DELETE FROM usuarios WHERE id IN (?);", list(id))
dbDisconnect(conn)
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
dbExecute(conn, "DELETE FROM usuarios WHERE id IN (?);", list(id))
dbExecute(conn, "DELETE FROM usuarios WHERE id IN (?);", list(id))
id = c("fpsanzfepesanz8@gmail.comss", "fpsanzfepesanz8@gmail.comrr")
if
id
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
dbExecute(conn, "DELETE FROM usuarios WHERE id IN (?);", list(id))
dbDisconnect(conn)
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
ids
id
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
recuperarDatosUsuario(input$usuarios)
recuperarDatosUsuario(input$usuarios)
dfUsuario$val
dfUsuario$val <- recuperarDatosUsuario(input$usuarios)
dfUsuario$val
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
recuperarDatosUsuario(input$usuarios)
kk = recuperarDatosUsuario(input$usuarios)
kk$mail
runApp('updateDBapp.R')
dfUsuario$val$mail
runApp('updateDBapp.R')
input$inputMail
length(input$inputMail)
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
input$inputMail == ""
input$inputMail
runApp('updateDBapp.R')
runApp('updateDBapp.R')
!is.null(input$inputMail) & input$inputMail == ""
!is.null(input$inputMail)
!is.null(input$inputMail) | input$inputMail ==""
input$inputMail
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
input$inputMail
runApp('updateDBapp.R')
runApp('updateDBapp.R')
is.null(input$inputMail)
!is.null(input$inputMail)
input$inputMail
input$inputMail
runApp('updateDBapp.R')
updateTextInput(session, "inputMail", value = NULL)
input$inputMail
input$inputMail <- NULL
runApp('updateDBapp.R')
runApp('updateDBapp.R')
input$inputMail
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp()
runApp('updateDBapp.R')
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
conn <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
usuario="fpsanz"
resdf <- dbGetQuery(con, paste0("Select * from usuarios where usuario ='",usuario,"';") )
con <- DBI::dbConnect(SQLite(), dbname = "usuarios.db")
resdf <- dbGetQuery(con, paste0("Select * from usuarios where usuario ='",usuario,"';") )
dbDisconnect(con)
dbDisconnect(conn)
resdf
runApp()
a = 1
b = 2
runApp()
runApp('updateDBapp.R')
a = 1
b = 2
save("kk.Rdata", list(a,b))
save(file="kk.Rdata", list(a,b) )
save(file="kk.Rdata", list = c("a","b") )
rm(a)
rm(b)
load("kk.Rdata")
rm(a)
rm(b)
load("kk.Rdata")
save(file="kk.Rdata", list = c(a,b) )
runApp()
library(shiny); runApp('updateDBapp.R')
runApp('updateDBapp.R')
runApp()
library(shinythemes)
runApp()
runApp()
runApp()
runApp()
runApp()
#cargar tabla de muestras y experimentos
exper <- read.delim("metadata.tsv", sep = "\t", header = T)
exper <- read.delim("/datos/analisisInvestigadores/20210625_mulero_metagenomica/metadata.tsv", sep = "\t", header = T)
exper
# cargar fichero de abundancias
otu <- as.matrix(read.delim("datos/analisisInvestigadores/20210625_mulero_metagenomica/controles/OTU_genus.txt", row.names=1))
attr(otu, "dimnames")[[2]] <- gsub("^S[0-9].{2}_",
"",
attr(otu, "dimnames")[[2]] ) %>%
gsub("_v1|_v2", "" , .)
# cargar fichero de abundancias
otu <- as.matrix(read.delim("datos/analisisInvestigadores/20210625_mulero_metagenomica/controles/OTU_genus.txt", row.names=1))
# cargar fichero de abundancias
otu <- as.matrix(read.delim("/datos/analisisInvestigadores/20210625_mulero_metagenomica/controles/OTU_family.txt", row.names=1))
attr(otu, "dimnames")[[2]] <- gsub("^S[0-9].{2}_",
"",
attr(otu, "dimnames")[[2]] ) %>%
gsub("_v1|_v2", "" , .)
otu
save("data/muleroControlesFamily.Rdata", list(exper,otu))
save("data/muleroControlesFamily.Rdata", list("exper","otu"))
save("data/muleroControlesFamily.Rdata", list = c("exper","otu") )
save("./data/muleroControlesFamily.Rdata", list = c("exper","otu") )
save("muleroControlesFamily.Rdata", list = c("exper","otu") )
save("muleroControlesFamily.RData", list = c("exper","otu") )
save(file="muleroControlesFamily.RData", list = c("exper","otu") )
save(file="data/muleroControlesFamily.RData", list = c("exper","otu") )
runApp()
runApp()
env <- reactiveFileReader(1000, session, "data/muleroControlesFamily.RData", LoadToEnvironment)
env
env()[[names(env())[1]]]
env <- reactiveFileReader(1000, session, "data/muleroControlesFamily.RData", LoadToEnvironment )
vars <- load(file = "data/muleroControlesFamily.RData", envir = .GlobalEnv)
vars
get[[vars[1]]]
get(vars[1], .GlobalEnv)
get(vars[2], .GlobalEnv)
runApp('updateDBapp.R')
runApp()
runApp()
objetos
runApp()
datos$exper
datos$ot
datos$otu
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
selectInput("selectvariable", )
runApp()
runApp()
runApp()
colnames(datos$exper)
runApp()
